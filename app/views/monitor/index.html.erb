<script type="text/javascript" charset="utf-8">
  var flag = true;
  var selectDiviceId = "";

  function toggleStartStop(){
	  flag = !flag;
	  if(flag){
              $("button#startStopBtn").text("stop");
	  }else{
	      $("button#startStopBtn").text("start");
	  }
  }

  $(function () {
      showCharts();
  });


  function showCharts(){
    new Highcharts.Chart({
    //$('div#cpu_container').highcharts({
        chart: {
            renderTo: 'cpu_container',
            //alignTicks: false,
            type: 'spline',
            animation: Highcharts.svg, // don't animate in old IE
            marginRight: 10,
            events: {
                load: function () {

                    // set up the updating of the chart each second
		            var series = this.series[0];
			    setInterval(function () {
				if(flag){
		                      $.get('<%= @url %>'+ '?device_id='+ selectDiviceId, function(data){
                	                  var date = new Date();
                                      var second = date.getTime() - date.getTimezoneOffset()*60000 ; // current time
                                      var x = second;
			                          var y = parseInt(data["cpu"]);
                                      //var y = data;
                                      //console.log(typeof(y));
			                          $("p#cpu").text("x: " + x + " y: "+y);
				                      series.addPoint([x, y], true, true);
				      });
				 }
                            }, 1000);
                }
            }
        },
        title: {
                text: 'CPU'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 15
            },
            yAxis: {
                title: {
                    text: 'Percentage'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: false
            },
            exporting: {
                enabled: true
            },
            series: [{
                name: 'Random data',
                data: (function () {
                    // generate an array of random data
                    var data = [],
                        time = (new Date()).getTime() - (new Date()).getTimezoneOffset()*60000,
                        i;

                    for (i = -19; i <= 0; i += 1) {
                        data.push({
                            x: time + i * 1000,
                            y: Math.random()
                        });
                    }
                    return data;
                }())
        }]
    });
    new Highcharts.Chart({
        chart: {
            renderTo: 'memory_container',
            //alignTicks: false,
            type: 'spline',
            animation: Highcharts.svg, // don't animate in old IE
            marginRight: 10,
            events: {
                load: function () {

                    // set up the updating of the chart each second
                    var series = this.series[0];
                    setInterval(function () {
			 if(flag){
			      $.get("<%= @url %>"+ '?device_id='+ selectDiviceId, function(data){
                              var date = new Date();
                              var second = date.getTime() - date.getTimezoneOffset()*60000 ; // current time
                              var x = second;
                              var y = parseInt(data["memory"]);
                              $("p#memory").text("x: "+x + "   y: "+y);
                              series.addPoint([x, y], true, true);
			      });
			  }
                    }, 1000);
                }
            }
        },
        title: {
                text: 'MEMORY(PSS)'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 15
            },
            yAxis: {
                title: {
                    text: 'KB'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: false
            },
            exporting: {
                enabled: true
            },
            series: [{
                name: 'Random data',
                data: (function () {
                    // generate an array of random data
                    var data = [],
                        time = (new Date()).getTime() - (new Date()).getTimezoneOffset()*60000,
                        i;

                    for (i = -19; i <= 0; i += 1) {
                        data.push({
                            x: time + i * 1000,
                            y: Math.random()
                        });
                    }
                    return data;
                }())
        }]
    });
    new Highcharts.Chart({
        chart: {
            renderTo: 'flow_container',
            //alignTicks: false,
            type: 'spline',
            animation: Highcharts.svg, // don't animate in old IE
            marginRight: 10,
            events: {
                load: function () {

                    // set up the updating of the chart each second
                    var series = this.series[0];
                    setInterval(function () {
			if(flag){    
			    $.get("<%= @url %>"+'?device_id='+ selectDiviceId, function(data){
                              var date = new Date();
                              var second = date.getTime() - date.getTimezoneOffset()*60000 ;// current time
                              var x = second;
                              var y = parseInt(data["flow"]);
                              $("p#flow").text("x: "+x + "   y: "+y);
                              series.addPoint([x, y], true, true);
			      });
			}
                    }, 1000);
                }
            }
        },
        title: {
                text: 'NetWork Speed (download)'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 15
            },
            yAxis: {
                title: {
                    text: 'KB/S'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: false
            },
            exporting: {
                enabled: true
            },
            series: [{
                name: 'Random data',
                data: (function () {
                    // generate an array of random data
                    var data = [],
                        time = (new Date()).getTime() - (new Date()).getTimezoneOffset()*60000,
                        i;

                    for (i = -19; i <= 0; i += 1) {
                        data.push({
                            x: time + i * 1000,
                            y: Math.random()
                        });
                    }
                    return data;
                }())
        }]
    });

    }

    function showCpuHistory(){ 
        var cpuHistoryData = '<%= refreshData() %>'.toString();
        cpuHistoryData = cpuHistoryData.replace("&quot;","\"");
        cpuHistoryData = cpuHistoryData.replace("&gt;","\"");
        console.log(eval(cpuHistoryData));
        var startPointX = cpuHistoryData[0]["timestamp_local"] / 1000;
        var historyData = [];
        var i =0 ;
        for (i=0; i < cpuHistoryData.length; i++){ 
             historyData.push(cpuHistoryData[i]["cpu"]);
        }
        //alert(cpuHistoryData);
        $.artwl_bind({ showbtnid: "showCpuHistoryBtn", title: "CPU history", content: $("#cpu_history_container") });
        new Highcharts.Chart({
        chart: {
            renderTo: 'cpu_history_container',
            type: 'area'
        },
        title: {
            text: 'CPU History'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            labels: {
                formatter: function() {
                    return this.value; // clean, unformatted number for year
                }
            }
        },
        yAxis: {
            title: {
                text: 'Nuclear weapon states'
            },
            labels: {
                formatter: function() {
                    return this.value / 1000 +'k';
                }
            }
        },
        tooltip: {
            pointFormat: '{series.name} produced <b>{point.y:,.0f}</b><br/>warheads in {point.x}'
        },
        plotOptions: {
            area: {
                //pointStart: startPointX,
                pointStart: 1,
                marker: {
                    enabled: false,
                    symbol: 'circle',
                    radius: 2,
                    states: {
                        hover: {
                            enabled: true
                        }
                    }
                }
            }
        },
        series: [{
    
            name: 'Mi',
            //data: historyData,
            data: [null, null, null, null, null, 6 , 11, 32, 110, 235, 369, 640,1005, 1436,
                    2063, 3057, 4618, 6444, 9822, 15468, 20434, 24126,27387, 29459, 31056, 31982,
                    32040, 31233, 29224, 27342, 26662,26956, 27912, 28999, 28965, 27826, 25579,
                    25722, 24826, 24605,24304, 23464, 23708, 24099, 24357, 24237, 24401, 24344,
                    23586,22380, 21004, 17287, 14747, 13076, 12555, 12144, 11009, 10950,
                10871, 10824, 10577, 10527, 10475, 10421, 10358, 10295, 10104 
            ]
        }]
    });
        $("#cpu_history_container").show();
    }

    function refreshDevicesList(){ 
        $.ajax({
            type: "GET",
            url: "http://192.168.199.180:3001/processor/refreshDevices",
            contentType: "application/json",
            dataType: "JSON",
            success: function(data){
                var objSelectNow = document.getElementById("phones");
                
                objSelectNow.options.length = 0;
                for(var key in data){
                    var objOption = document.createElement("option");
                    objOption.value = key;
                    objOption.text = data[key];
                    objSelectNow.options.add(objOption);
                }

            },
            complete: function(){}
        });




    }

    function onSelectItemChanged(){ 
        var objSelectNow = document.getElementById("phones");
        selectDiviceId = objSelectNow.options[objSelectNow.selectedIndex].value;
    }

</script>

<h1>Mobile Monitor WebSite</h1>
<p></p>
<select id="phones" onchange="onSelectItemChanged()"></select>
<button type="button" id="showCpuHistoryBtn" onclick="showCpuHistory()">Show history data of CPU </button>
<button type="button" id="showMemoryHistoryBtn">Show history data of Memory </button>
<button type="button" id="showFlowHistoryBtn">Show history data of NetWork Speed </button>
<button type="button" id="refreshDevices" onclick="refreshDevicesList()">refresh devices list</button>
<br>
<br>
<button type="button" id="startStopBtn" onclick="toggleStartStop()">stop</button>

<div id="cpu_container" style="width: 1500px; height: 200px"></div>
<p id="cpu"></P>
<div id="cpu_history_container" style="width: 1500px; height: 200px" display="none"></div>
<div id="memory_container" style="width: 1500px; height: 200px"></div>
<p id="memory"></P>
<div id="flow_container" style="width: 1500px; height: 200px"></div>
<p id="flow"></P>


